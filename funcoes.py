
import pickle
import interfaces as ifc 
from dicionarios import clientes, veiculos, historico_aluguel, funcionarios
import validacao as val
import validacao as val

########################################################
#####            Escrever Arquivos                 #####
########################################################
def escreverArquivos():
    arq_clientes = open("clientes.dat", "wb")
    pickle.dump(clientes, arq_clientes)
    arq_clientes.close()

    arq_funcionarios = open("funcionarios.dat", "wb")
    pickle.dump(funcionarios, arq_funcionarios)
    arq_funcionarios.close()

    arq_veiculos = open("veiculos.dat", "wb")
    pickle.dump(veiculos, arq_veiculos)
    arq_veiculos.close()

    arq_historico_aluguel = open("historico_aluguel.dat", "wb")
    pickle.dump(historico_aluguel, arq_historico_aluguel)
    arq_historico_aluguel.close()

########################################################
#####                Menu Pricipal                 #####
########################################################
def menuPrincipal():
    ifc.interface_principal()
    op_pric = input("=====‚ù± Escolha sua op√ß√£o: ")
    return op_pric

##################################### 
#####          Menus            #####  
##################################### 

#M√≥dulo Clientes
def modCliente():
    ifc.interface_clientes()
    op_cliente = input("=====‚ù± Escolha sua op√ß√£o: ") 
    return op_cliente

#M√≥dulo Funcion√°rios
def modFunc():
    ifc.interface_funcionarios()
    op_func = input("=====‚ù± Escolha sua op√ß√£o: ")
    return op_func

#M√≥dulo Ve√≠culos   
def modVeic():
    ifc.interface_veiculos()
    op_veic = input("=====‚ù± Escolha sua op√ß√£o: ")
    return op_veic

#M√≥dulo Reserva
def modReserva():
    ifc.interface_reserva()
    op_reserva = input("=====‚ù± Escolha sua op√ß√£o: ")
    return op_reserva

#M√≥dulo Relat√≥rios
def modRelatorio():
    ifc.interface_relatorio()
    op_relatorio = input("=====‚ù± Escolha sua op√ß√£o: ")
    return op_relatorio 

#M√≥dulo Informa√ß√µes
def modInfo():
    ifc.interface_informacoes()
    input("Tecle <ENTER> para voltar ao menu principal...")

##################################### 
#####       Verifica√ß√£o         #####  
#####################################

def ler_nome():
    nome = input("üë§ Nome: ")
    while not val.validar_nome(nome):
        print("==‚ä≥ Ops! O nome informado √© inv√°lido!")
        print("==‚ä≥ Tente novamente...")
        print()
        nome = input("üë§ Nome: ")
    return nome

def ler_email():
    email = input("üìß Email: ")
    while not val.validar_email(email):
        print("==‚ä≥ Ops! O email informado √© inv√°lido!")
        print("==‚ä≥ Tente novamente...")
        print()
        email = input("üìß Email: ")
    return email

def ler_data_nascimento():
    data_nascimento = input("üéÇ Data de nascimento (00/00/0000): ")
    is_valid, message = val.validar_Datanascimento(data_nascimento)
    while not is_valid:
        print(f"==‚ä≥ Ops! {message}")
        print("==‚ä≥ Tente novamente...")
        print()
        data_nascimento = input("üéÇ Data de nascimento (00/00/0000): ")
        is_valid, message = val.validar_Datanascimento(data_nascimento)
    return data_nascimento

def ler_placa_veiculo():
    placa = input("‚ä≥ Placa do Ve√≠culo: ")
    while not val.validar_placa(placa):
        print("==‚ä≥ Ops! A placa do ve√≠culo informada √© inv√°lida!")
        print("==‚ä≥ Tente novamente...")
        print()
        placa = input("‚ä≥ Placa do Ve√≠culo: ")
    return placa

def ler_cpf():
    cpf = input("üÜî CPF: ")
    cpf = val.formatar_cpf(cpf)
    while not val.validar_cpf(cpf):
        print("==‚ä≥ Ops! CPF inv√°lido!")
        print("==‚ä≥ Tente novamente...")
        print()
        cpf = input("üÜî CPF: ")
    return cpf

def ler_telefone():
    fone = input("üìû Celular: ")
    fone = val.formatar_telefone(fone)
    while not val.validar_telefone(fone):
        print("==‚ä≥ Ops! O telefone informado √© inv√°lido!")
        print("Utilize o modelo a seguir como exemplo: '+55 12 34567-8901' ou '12 3456-7890'")
        print("==‚ä≥ Tente novamente...")
        print()
        fone = input("üìû Celular: ")
    return fone

def ler_ano_veiculo():
    ano = input("‚ä≥ Ano de lan√ßamento: ")
    while not val.validar_ano_veiculo(ano):
        print("==‚ä≥ Ops! Ano inv√°lido!")
        print("==‚ä≥ O ano deve ser um n√∫mero de quatro d√≠gitos entre 1886 e o ano atual.")
        print()
        ano = input("‚ä≥ Ano de lan√ßamento: ")
    return ano